{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Visual Novel Script","text":"<p>Visual Novel Script, short for VNS, is a universal scripting language created with the goal of creating a language that allows visual novel developers to write once and compile everywhere, across different platforms, game libraries, and programming languages.</p> <p>VNS provides a number of features that make it easy to create visual novels, such as:</p> <ul> <li>A simple and easy-to-learn syntax</li> <li>Support for branching dialogue and choices</li> <li>Support for music and sound effects</li> </ul> <p>Unlike Ren'py, writing visual novel script is more like writing a story instead of a program, and the developers also have the choice to create their own implementation.</p>"},{"location":"#how-it-started","title":"How it started:","text":"<p>The development of the VNS can be traced all the way back to the initial stages of Linpg's development. During this period, the team faced the challenge of finding an efficient method to store the dialogue. Each conversation required the storage of multiple variables, including the narrator, the actual dialogue content, associated character images, ambient background music, and various other components:</p> <p></p> <p>Ultimately, the team opted for a design inspired by doubly linked list, but implemented using dictionary (HashMap for Java forks). This approach not only facilitated easier access to the data but also  streamlined the saving process, enabling compatibility with formats like JSON or YAML. This method preserved readability while efficiently  managing the dialogue. Today, the current system closely resembles our initial design, with only a few subtle refinements:</p> <pre><code>compiler: ...\ndialogues:\n  dialog1:\n    head:\n      background_image: bg1.jpg\n      background_music: bgm1.mp3\n      character_images:\n      - alice.png\n      contents:\n      - Hello\n      narrator: Alice\n      next:\n        target: ~01\n        type: default\n      previous: null\n    ~01:\n      background_image: bg1.jpg\n      background_music: bgm1.mp3\n      character_images:\n      - alice.png\n      contents:\n      - Can you hear me?\n      narrator: Alice\n      next:\n        target: ~02\n        type: default\n      previous: head\n    ~02:\n    ...\n  dialog2:\n    ...\n  ...\nid: 1\nlanguage: English\n</code></pre> <p>Although the overall data is easy to read, it is somewhat inconvenient to write. We came up with a dedicated dialogue editor to resolve the issue, but it's still a bit of a hassle. That is the reason why we begin to inquire about the possibility of simplifying the process.</p> <p>Would it be possible to make it feel like we're writing the dialogue in a Microsoft Word document? Thus, VNS is born.</p>"},{"location":"#example","title":"Example:","text":"<p>Here is a simple example of a VNS script:</p> <pre><code>[id]1\n[language]English\n\n[section]dialog_example\n\n[bgi]bg1.png\n[display]character1.png character2.png\n\nMabel:\n- Hello my name is Mabel!\n- How are you doing today!\n\n[hide]character1.png\n\nDipper:\n- Hi Mabel! I'm doing well, thanks for asking.\n</code></pre> <p>This script would display the background image <code>bg1.png</code> and the character images <code>character1.png</code> and <code>character2.png</code>. Mabel would then say \"Hello my name is Mabel!\" and \"How are you doing today!\". Next, <code>character1.png</code> would be hidden and Dipper would say \"Hi Mabel! I'm doing well, thanks for asking.\" Finally, the script would end.</p>"},{"location":"#license","title":"License:","text":"<p>VNS is licensed under LGPL(GNU Lesser General Public License)-2.1-or-later.</p> <p>See LICENSE.</p>"},{"location":"tutorials/basic_tutorial/","title":"Basic Tutorials:","text":""},{"location":"tutorials/basic_tutorial/#the-basics-of-vns","title":"The Basics of VNS","text":"<p>VNS (Visual Novel Script) is a scripting language used to create interactive visual novels. These scripts are written in plain text files with the <code>.vns</code> extension. Imagine crafting a story filled with descriptions, dialogues, choices, and multimedia elements like images and music. VNS uses special tags to transform your script into an immersive experience featuring characters, backgrounds, music, and branching narratives.</p>"},{"location":"tutorials/basic_tutorial/#lets-dive-into-the-building-blocks","title":"Let's dive into the building blocks:","text":""},{"location":"tutorials/basic_tutorial/#1-tags","title":"1. Tags:","text":"<p>Tags are the core elements of VNS. They instruct the program on how to display content. Enclosed in square brackets, tags help define scenes, characters, backgrounds, and more.</p>"},{"location":"tutorials/basic_tutorial/#2-essential-tags","title":"2. Essential tags:","text":"<p>Here are some of the most commonly used tags in VNS:</p> <ul> <li>ID: <code>[id]string</code></li> </ul> <p>Defines the unique identifier of the script.</p> <ul> <li>Language: <code>[language]string</code></li> </ul> <p>Specifies the language of the script.</p> <ul> <li>Section: <code>[section]string</code></li> </ul> <p>Denotes a new section in the script.</p> <ul> <li>Background Image: <code>[bgi]string</code></li> </ul> <p>Sets the background image for the current and subsequent dialogues.</p> <ul> <li>Background Music: <code>[bgm]string</code></li> </ul> <p>Sets the background music for the current and subsequent dialogues.</p> <ul> <li>Show Character(s): <code>[show]string(s)</code> </li> </ul> <p>Introduces (new) character image(s) to the scene.</p>"},{"location":"tutorials/basic_tutorial/#3-a-glimpse-into-storytelling","title":"3. A glimpse into storytelling:","text":"<p>Let's put these tags into action with a simple example.</p>"},{"location":"tutorials/basic_tutorial/#example-script","title":"Example Script","text":"<pre><code>[id]1\n[language]English\n[section]dialog_example\n\n[bgm]music1.ogg\n[bgi]bg1.png\n[show]character.png\n\nAlex:\n- Hellow world!\n</code></pre>"},{"location":"tutorials/basic_tutorial/#explanation","title":"Explanation","text":"<ul> <li><code>[id]1</code>: Sets the script ID to \"1\".</li> <li><code>[language]English</code>: Specifies that the script is in English.</li> <li><code>[section]dialog_example</code>: Begins a new section called \"dialog_example\".</li> <li><code>[bgm]music1.ogg</code>: Plays \"music1.ogg\" as background music.</li> <li><code>[bgi]bg1.png</code>: Displays \"bg1.png\" as the background image.</li> <li><code>[show]character.png</code>: Shows \"character.png\" on the screen.</li> <li><code>Alex:</code>: Indicates that the following dialogue is spoken by \"Alex\".</li> <li><code>- Hello, world!</code>: The dialogue line spoken by the character.</li> </ul>"},{"location":"tutorials/basic_tutorial/#expected-output","title":"Expected Output","text":"<p>When compiled, the script should produce a JSON representation like this:</p> <pre><code>{\n    \"compiler\": {...},\n    \"dialogues\": {\n        \"dialog_example\": {\n            \"head\": {\n                \"background_image\": \"bg1.png\",\n                \"background_music\": \"music1.ogg\",\n                \"character_images\": [\n                    \"character.png\"\n                ],\n                \"contents\": [\n                    \"Hellow world!\"\n                ],\n                \"narrator\": \"Alex\"\n            }\n        }\n    },\n    \"id\": \"1\",\n    \"language\": \"English\"\n}\n</code></pre> <p>This JSON structure represents how the script is interpreted, showing the background, music, characters, and dialogue content.</p>"},{"location":"tutorials/basic_tutorial/#ready-to-explore-more","title":"Ready to explore more?","text":"<p>This is just the beginning! Check out the documentation for in-depth details. Remember, practice makes perfect. Start simple, experiment, and most importantly, have fun creating your unique stories!</p> <p>With dedication and creativity, your journey awaits! Happy storytelling!</p>"},{"location":"tutorials/comments_and_notes/","title":"Comments:","text":"<pre><code>// This is a comment explaining the purpose of the following code block.\n// It helps in understanding the functionality of the script.\n// Comments are essential for readability and maintenance.\n</code></pre> <p>Comments are lines of text in a script that are ignored during execution. They provide helpful annotations, making the code more understandable to developers, collaborators, and future maintainers. Typical uses of comments include explaining code logic, outlining TODOs, and offering relevant insights into the script\u2019s functionality or design.</p>"},{"location":"tutorials/comments_and_notes/#notes","title":"Notes:","text":"<pre><code># This is a note providing additional information about a specific dialogue.\n# Notes are similar to comments but are intended for specific conversations or reminders.\n# They are retained in the source file and can provide context for future modifications.\n</code></pre> <p>Notes serve a purpose similar to comments but are often targeted at specific dialogue instances or sections within the code. They can include explanations, insights, or reminders for developers working on the scripts. Unlike standard comments, which are typically ignored or removed during compilation or execution, notes will be processed and retained to provide ongoing context.</p>"},{"location":"tutorials/dialogues/","title":"Dialogues:","text":"<p>A Dialogue is structured as follows:</p> <pre><code>Character name:\n- Dialogue text\n- Additional dialogue text\n</code></pre> <p>Each section starts with the character's name followed by a colon. The dialogue lines are then listed with a hyphen and a space before each line. This clear structure helps maintain readability and ensures it\u2019s easy to track the speaker throughout the script.</p>"},{"location":"tutorials/dialogues/#key-points","title":"Key Points:","text":"<ul> <li>Character Name: Placed at the start of the dialogue block, followed by a colon.</li> <li>Dialogue Line(s): Begin with a hyphen and space before each line of dialogue.</li> <li>Consistency: Using this consistent structure enhances the script\u2019s flow and makes conversations easy to follow.</li> </ul>"},{"location":"tutorials/dialogues/#example","title":"Example:","text":"<pre><code>Mabel:\n- Hello, my name is Mabel!\n- How are you doing today?\n</code></pre> <p>By adhering to this format, the script remains organized, making it simpler for readers to navigate through conversations and understand the speaker at all times.</p>"},{"location":"tutorials/tags/bgi/","title":"Background image:","text":"<p>Specifies the background image for the current and following dialogues.</p>"},{"location":"tutorials/tags/bgi/#syntax","title":"Syntax","text":"<pre><code>[bgi]string\n</code></pre>"},{"location":"tutorials/tags/bgi/#example","title":"Example","text":"<pre><code>[bgi]park.png\n</code></pre> <p>This sets the background image to \"park.png\" located in the specified directory.</p>"},{"location":"tutorials/tags/bgm/","title":"Background music:","text":"<p>Specifies the background music for the current and following dialogues.</p>"},{"location":"tutorials/tags/bgm/#syntax","title":"Syntax","text":"<pre><code>[bgm]string\n</code></pre>"},{"location":"tutorials/tags/bgm/#example","title":"Example","text":"<pre><code>[bgm]theme.mp3\n</code></pre> <p>This sets the background music to \"theme.mp3\" located in the specified directory.</p>"},{"location":"tutorials/tags/block/","title":"Block:","text":"<p>Prevents the player from returning to the previous conversation.</p>"},{"location":"tutorials/tags/block/#syntax","title":"Syntax","text":"<pre><code>Me:\n- I will only say this once.\n- I like you!\n...\n\n[block]\n\n...\nMe:\n- And I will not say it one more time.\n</code></pre>"},{"location":"tutorials/tags/display/","title":"Display character(s):","text":"<p>This command is used to display character images for current or upcoming dialogues. Unlike the <code>[show]</code> tag, which adds new character images while retaining existing ones, the <code>[display]</code> tag first clears any previously shown images before displaying the specified character image(s). This ensures that only the designated character images appear on the screen.</p>"},{"location":"tutorials/tags/display/#syntax","title":"Syntax","text":"<pre><code>[display]image1 image2 ...\n</code></pre> <p>image1, image2, etc., represent the filenames of the character images to be displayed.</p>"},{"location":"tutorials/tags/display/#example","title":"Example","text":"<pre><code>[display]character1.png character2.png\n</code></pre> <p>In this example, any previously displayed images will be cleared, and the images <code>character1.png</code> and <code>character2.png</code> will be shown.</p>"},{"location":"tutorials/tags/end/","title":"End of Current Dialogue Branch","text":"<p>The <code>[end]</code> tag is used to mark the conclusion of the current dialogue branch. Once this tag is encountered, the program will recognize that the dialogue or narrative path has finished.</p>"},{"location":"tutorials/tags/end/#syntax","title":"Syntax","text":"<pre><code>Me:\n- I guess this is the end of the story.\n\n[end]\n</code></pre> <p>By using <code>[end]</code>, you signal that no further dialogue or choices will follow in this particular branch, and the story can transition or conclude as necessary.</p>"},{"location":"tutorials/tags/hide/","title":"Hide Character(s)","text":"<p>The <code>[hide]</code> tag is used to remove character images from the screen, either selectively or all at once, for the current and subsequent dialogues.</p>"},{"location":"tutorials/tags/hide/#syntax","title":"Syntax","text":"<pre><code>[hide]image1 image2 ...\n</code></pre> <p>image1, image2, etc., represent the filenames of the character images to be hidden.</p> <p>To hide all characters at once, use:</p> <pre><code>[hide]*\n</code></pre>"},{"location":"tutorials/tags/hide/#example","title":"Example","text":"<pre><code>[hide]character1.png character2.png\n</code></pre> <p>In this example, the images <code>character1.png</code> and <code>character2.png</code> will be hidden, while other character images (if any) remain visible.</p> <p>Alternatively, using:</p> <pre><code>[hide]*\n</code></pre> <p>will hide all currently displayed character images.</p>"},{"location":"tutorials/tags/id/","title":"Script ID","text":"<p>The <code>[id]</code> tag assigns a unique identifier to the current dialogue script file. Each script file must have a distinct ID to ensure proper identification and organization within the system.</p>"},{"location":"tutorials/tags/id/#syntax","title":"Syntax","text":"<pre><code>[id]unique_identifier\n</code></pre> <p>unique_identifier is a string representing the unique ID for the script.</p>"},{"location":"tutorials/tags/id/#example","title":"Example","text":"<pre><code>[id]1\n</code></pre> <p>In this example, the script is assigned the ID <code>1</code>, ensuring it can be referenced and managed uniquely.</p>"},{"location":"tutorials/tags/jump/","title":"Jump:","text":"<p>Jump to a specific label.</p>"},{"location":"tutorials/tags/jump/#syntax","title":"Syntax","text":"<pre><code>[jump]label_name\n</code></pre> <ul> <li>label_name is the target label the script will jump to.</li> </ul>"},{"location":"tutorials/tags/jump_/","title":"Jump_:","text":"<p>Jump to a specific label, but unlike a regular jump, the target dialogue cannot return to the parent dialogue from which it originated.</p>"},{"location":"tutorials/tags/jump_/#syntax","title":"Syntax","text":"<pre><code>[jump_]label_name\n</code></pre> <ul> <li>label_name is the target label the script will jump to.</li> </ul>"},{"location":"tutorials/tags/label/","title":"Label","text":"<p>The <code>[label]</code> tag is used to create a reference point within the dialogue script. This label can be targeted by branching commands, allowing the flow of the conversation to jump to this specific point.</p>"},{"location":"tutorials/tags/label/#syntax","title":"Syntax","text":"<pre><code>[label]label_name\n</code></pre> <p>label_name represents the unique identifier for this point in the dialogue.</p>"},{"location":"tutorials/tags/label/#example","title":"Example","text":"<pre><code>[label]jump_point1\n</code></pre> <p>In this example, <code>jump_point1</code> serves as a reference label that can be used later to direct the conversation flow to this specific part of the script.</p>"},{"location":"tutorials/tags/language/","title":"Language","text":"<p>The <code>[language]</code> tag defines the language used in the current dialogue script. Each script file must specify its language to ensure proper localization and presentation.</p>"},{"location":"tutorials/tags/language/#syntax","title":"Syntax","text":"<pre><code>[language]language_name\n</code></pre> <p>language_name represents the name of the language being used in the script (e.g., English, Japanese, etc.).</p>"},{"location":"tutorials/tags/language/#example","title":"Example","text":"<pre><code>[language]English\n</code></pre> <p>In this example, the language for the script is set to English.</p>"},{"location":"tutorials/tags/option/","title":"Option(s)","text":"<p>The <code>[option]</code> tag adds interactive choices to the current dialogue, allowing players to select an option and branch the story to a specific label based on their choice.</p>"},{"location":"tutorials/tags/option/#syntax","title":"Syntax","text":"<pre><code>[option]option_text-&gt;label_name\n</code></pre> <ul> <li>option_text is the message displayed as a choice for the player.</li> <li>label_name is the target label the script will jump to after the option is selected.</li> </ul>"},{"location":"tutorials/tags/option/#example","title":"Example","text":"<pre><code>[option]Can you hear me?-&gt;yes_reply\n</code></pre> <p>In this example, the option \"Can you hear me?\" is presented to the player. If chosen, the story will branch to the label <code>yes_reply</code>.</p>"},{"location":"tutorials/tags/scene/","title":"New Scene","text":"<p>The <code>[scene]</code> tag is used to transition to a new scene by displaying a specified background image. This command clears the previous scene and introduces the new one, setting the stage for the next part of the story.</p>"},{"location":"tutorials/tags/scene/#syntax","title":"Syntax","text":"<pre><code>[scene]background_image\n</code></pre> <p>background_image is the filename of the image to be displayed as the new scene's background.</p>"},{"location":"tutorials/tags/scene/#example","title":"Example","text":"<pre><code>[scene]bg2.png\n</code></pre> <p>In this example, the background image <code>bg2.png</code> is loaded to start a new scene.</p>"},{"location":"tutorials/tags/section/","title":"Section","text":"<p>The <code>[section]</code> tag is used to define a specific section that groups all subsequent dialogues. It helps organize the script by segmenting it into different sections for easier management and navigation.</p>"},{"location":"tutorials/tags/section/#syntax","title":"Syntax","text":"<pre><code>[section]section_name\n</code></pre> <p>section_name represents the identifier for the section that will encompass all following dialogues.</p>"},{"location":"tutorials/tags/section/#example","title":"Example","text":"<pre><code>[section]dialog_example\n</code></pre> <p>In this example, <code>dialog_example</code> becomes the section that contains all dialogues and actions following this tag.</p>"},{"location":"tutorials/tags/show/","title":"Show Character(s)","text":"<p>The <code>[show]</code> tag is used to display one or more character images on the screen, corresponding to the ongoing and upcoming dialogues. Unlike the <code>[display]</code> tag, this does not clear existing images but adds the specified character images alongside any already present.</p>"},{"location":"tutorials/tags/show/#syntax","title":"Syntax","text":"<pre><code>[show]character_image1 character_image2 ...\n</code></pre> <p>character_image1, character_image2, etc., represent the filenames of the character images to be shown.</p>"},{"location":"tutorials/tags/show/#example","title":"Example","text":"<pre><code>[show]character1.png character2.png\n</code></pre> <p>In this example, the character images <code>character1.png</code> and <code>character2.png</code> are introduced, without removing any previously displayed characters.</p>"},{"location":"vep/1-Variables/","title":"VEP 1 - Variables","text":"<ul> <li>VEP 1 - Variables<ul> <li>Abstract:</li> <li>Rationale and Goals:</li> <li>Definition:</li> <li>Syntax:</li> <li>Optional Syntax:</li> <li>Rejected Idea(s):<ul> <li>Persistent variables should start with '%'</li> </ul> </li> <li>Conclusion:</li> <li>VEP Development Process</li> <li>Copyright</li> </ul> </li> </ul>"},{"location":"vep/1-Variables/#abstract","title":"Abstract:","text":"<p>This VEP proposes a standardized system for variable creation and management within the Visual Novel Script (VNS). By defining clear rules for local, global, and persistent variables, developers can streamline their code and facilitate future feature implementation within VNS.</p>"},{"location":"vep/1-Variables/#rationale-and-goals","title":"Rationale and Goals:","text":"<p>Variables are fundamental components of any programming language, enabling developers to store and manipulate data. The primary objective of this proposal is to establish a unified approach to variable handling in VNS. This will not only enhance code readability and maintainability but also pave the way for implementing advanced features like conditional statements and explicit branching.</p>"},{"location":"vep/1-Variables/#definition","title":"Definition:","text":"<p>In VNS, variables will be categorized into three types: - Local Variables: These variables are confined to specific sections and are not shared between sections. Each section can have its own set of local variables, allowing for encapsulation and modularization of code. However, developers must implement a robust system for persisting local variables if progress saving is enabled. - Global Variables: Global variables persist across sections within a particular dialogue. They are visible and accessible throughout the entire dialogue, facilitating data sharing between sections. Global variables should be carefully managed, especially when implementing progress-saving functionality. - Persistent Variables: Persistent variables transcend individual dialogues and persist across sessions or even across the entire program/system. These variables require explicit management and should be saved persistently, typically on the client's device.</p>"},{"location":"vep/1-Variables/#syntax","title":"Syntax:","text":"<p>Variables in VNS can store signed numbers (floats, ints), boolean, or strings. The syntax for creating and updating variables is as follows:</p> <pre><code>// Local Variable Syntax:\nvariable_name = 1\ndoes_variable_exist = false\n// Global Variable Syntax:\n@variable_name = -3.1415926 // (Global variables must start with '@')\n// Persistent Variable Syntax:\n&amp;variable_name = \"Hello world\" // (Persistent variables must start with '&amp;')\n</code></pre>"},{"location":"vep/1-Variables/#optional-syntax","title":"Optional Syntax:","text":"<p>Additional syntax options are provided for convenience and flexibility:</p> <pre><code>variable_name ++ // Increment/Decrement: Use ++ and -- to increment or decrement number variables.\nvariable_name += 2  // Comment Number Operations\nvariable1 = variable2  // Variable Assignment\nvariable1 = variable2 + 21 // Complex Math Operations\n</code></pre>"},{"location":"vep/1-Variables/#rejected-ideas","title":"Rejected Idea(s):","text":""},{"location":"vep/1-Variables/#persistent-variables-should-start-with","title":"Persistent variables should start with '%'","text":"<p>When considering the proposal that persistent variables should start with the symbol '%', it's important to acknowledge the conflict this introduces with established conventions in many programming languages. The '%' symbol is widely recognized as the modulo operator, a fundamental mathematical operator used to find the remainder of a division between two numbers. This operator is a staple in programming languages such as Python, Java, C++, and many others, serving as an essential tool for various calculations and logic operations.</p> <p>Introducing '%' as a prefix for persistent variables could lead to confusion and readability issues in code. Developers accustomed to seeing '%' used in the context of arithmetic operations might misinterpret its purpose when used as a variable prefix. This could hinder the understanding of code, especially for beginners or those working in a collaborative environment where clear and intuitive code is crucial.</p> <p>Furthermore, repurposing common symbols can complicate the parsing and interpretation of code by compilers and interpreters. These tools are designed to recognize specific patterns and symbols with predefined meanings. Introducing a dual role for '%' could require significant adjustments in the parsing logic, potentially leading to increased complexity and a higher likelihood of bugs in language processors.</p>"},{"location":"vep/1-Variables/#conclusion","title":"Conclusion:","text":"<p>By adopting this standardized variable naming system and syntax, developers can improve code organization, readability, and maintainability in VNS projects. This proposal also lays the foundation for future enhancements and feature implementations within VNS.</p>"},{"location":"vep/1-Variables/#vep-development-process","title":"VEP Development Process","text":"<p>A live draft for this VEP lives on GitHub. There is also an issue tracker, where much of the technical discussion takes place. The draft on GitHub is updated regularly in small increments. The official VEPS repo is (usually) only updated when a new draft is posted to the Linpg Foundation.</p>"},{"location":"vep/1-Variables/#copyright","title":"Copyright","text":"<p>This document has been placed in the public domain.</p>"},{"location":"vep/2-Language%20Standard%20and%20Compiler%20Version%20Management/","title":"VEP 2 - Language Standard and Compiler Version Management","text":"<ul> <li>VEP 2 - Language Standard and Compiler Version Management<ul> <li>Abstract</li> <li>Motivation</li> <li>Specification<ul> <li>Syntax</li> <li>Examples</li> <li>Backward Compatibility</li> <li>Rejected Ideas<ul> <li>Allow Specifying Patch</li> <li>Using == for Enforcing a Specific Version</li> <li>Support for &gt;, &lt;, or !=</li> </ul> </li> </ul> </li> <li>Conclusion</li> <li>VEP Development Process</li> <li>Copyright</li> </ul> </li> </ul>"},{"location":"vep/2-Language%20Standard%20and%20Compiler%20Version%20Management/#abstract","title":"Abstract","text":"<p>This VEP proposes a new tag, <code>[vns]</code>, for specifying the version of the VNS language standard to be used for the current script file. </p>"},{"location":"vep/2-Language%20Standard%20and%20Compiler%20Version%20Management/#motivation","title":"Motivation","text":"<p>VNS languages have maintained backward compatibility across revisions, but this may not always be the case. Specifically, the removal of the <code>[br]</code> tag in VNS 2 can cause scripts using this tag to malfunction in later versions. Additionally, minor differences in behavior and outcomes due to bugs or other factors can cause games to fail. To mitigate these issues, a mechanism for specifying the language version is necessary. This version specification will also help developers perform version checks, thus preventing conflicts and incompatibility. Moreover, with the introduction of VNS-server, this feature will enable the server to select the most appropriate compiler for the compiling process.</p>"},{"location":"vep/2-Language%20Standard%20and%20Compiler%20Version%20Management/#specification","title":"Specification","text":""},{"location":"vep/2-Language%20Standard%20and%20Compiler%20Version%20Management/#syntax","title":"Syntax","text":"<p>By default, specifying the language standard for a script file is optional, assuming the script should work regardless of the VNS compiler version. </p> <p>The <code>[vns]</code> tag specifies the language standard version:</p> <pre><code>[vns] {&gt;=, &lt;=, !&lt;=, !&gt;=} &lt;version.revision&gt;\n</code></pre>"},{"location":"vep/2-Language%20Standard%20and%20Compiler%20Version%20Management/#examples","title":"Examples","text":"<ul> <li><code>[vns]2.3</code>: This script is written according to VNS 2.3 standard and should only be compiled using the VNS 2.3 compiler.</li> <li><code>[vns]&lt;=2.3</code>: If the script works between versions 2.0 and 2.3, this tag can be used. Note that compilers released before VNS 2.3 will not support this tag, unless using VNS-server.</li> <li><code>[vns]&gt;=2.3</code>: If the script uses features introduced in VNS 2.3 and is not compatible with earlier versions.</li> <li><code>[vns]!&lt;=2.3</code>: This script works with versions 1.0 through 2.3.</li> </ul> <p>Forward compatibility can be assumed between revisions, but forward and backward compatibility cannot be assumed between major version changes. Although not recommended, forced compatibility can be indicated using an exclamation mark.</p>"},{"location":"vep/2-Language%20Standard%20and%20Compiler%20Version%20Management/#backward-compatibility","title":"Backward Compatibility","text":"<p>The introduction of the [vns] tag will not affect existing scripts as it introduces new functionality without altering the behavior of current tags.</p>"},{"location":"vep/2-Language%20Standard%20and%20Compiler%20Version%20Management/#rejected-ideas","title":"Rejected Ideas","text":""},{"location":"vep/2-Language%20Standard%20and%20Compiler%20Version%20Management/#allow-specifying-patch","title":"Allow Specifying Patch","text":"<p>Specifying patch numbers is unnecessary due to the relatively short release cycle of patches, which only include bug fixes and guarantee forward and backward compatibility.</p>"},{"location":"vep/2-Language%20Standard%20and%20Compiler%20Version%20Management/#using-for-enforcing-a-specific-version","title":"Using <code>==</code> for Enforcing a Specific Version","text":"<p>Using <code>==</code> is redundant and may cause confusion. To avoid this, equality is assumed when no comparison operator is used, simplifying the syntax for non-programmers and improving readability.</p>"},{"location":"vep/2-Language%20Standard%20and%20Compiler%20Version%20Management/#support-for-or","title":"Support for <code>&gt;</code>, <code>&lt;</code>, or <code>!=</code>","text":"<p>These operators can create unclear compatibility and introduce scripts that cannot run, such as <code>[vns]&lt;2.0</code> when 2.0 is the first release of the VNS 2 standard. Additionally, the unlikely event of a tag being removed and reintroduced makes <code>!=</code> redundant. Higher version enforcement is preferable for maintaining script integrity.</p>"},{"location":"vep/2-Language%20Standard%20and%20Compiler%20Version%20Management/#conclusion","title":"Conclusion","text":"<p>The introduction of the <code>[vns]</code> tag for specifying the version of the VNS language standard addresses the need for clearer compatibility and version management in VNS scripts. By allowing script writers to specify the exact version or range of versions their scripts are compatible with, we can prevent issues arising from changes in language features and behavior between versions. This proposal not only helps maintain backward compatibility but also supports forward compatibility, facilitating smoother transitions and integrations with tools like VNS-server. By adopting this proposal, the VNS language will enhance its robustness and reliability, ensuring that scripts perform consistently across different versions of the compiler.</p>"},{"location":"vep/2-Language%20Standard%20and%20Compiler%20Version%20Management/#vep-development-process","title":"VEP Development Process","text":"<p>A live draft for this VEP lives on GitHub. There is also an issue tracker, where much of the technical discussion takes place. The draft on GitHub is updated regularly in small increments. The official VEPS repo is (usually) only updated when a new draft is posted to the Linpg Foundation.</p>"},{"location":"vep/2-Language%20Standard%20and%20Compiler%20Version%20Management/#copyright","title":"Copyright","text":"<p>This document has been placed in the public domain.</p>"},{"location":"vep/3-Introducing%20%5Bjump%5D%20Tag/","title":"VEP 3 - Introducing [jump] Tag","text":"<ul> <li>VEP 3 - Introducing [jump] Tag<ul> <li>Abstract</li> <li>Motivation</li> <li>Specification<ul> <li>Syntax</li> <li>Example Usage</li> <li>Behavior with Other Tags</li> </ul> </li> <li>Rejected Idea(s)<ul> <li>Reusing [br] Tag:</li> </ul> </li> <li>Rationale</li> <li>Backwards Compatibility</li> <li>VEP Development Process</li> <li>Copyright</li> </ul> </li> </ul>"},{"location":"vep/3-Introducing%20%5Bjump%5D%20Tag/#abstract","title":"Abstract","text":"<p>This VEP proposes a new tag for branching dialogues, [jump], to enable developers to jump from the current dialog to another specified dialog within a scenario. This enhancement aims to facilitate more complex and nested dialog structures, offering enhanced narrative flexibility when combined with existing tags such as [end], [block], and labels.</p>"},{"location":"vep/3-Introducing%20%5Bjump%5D%20Tag/#motivation","title":"Motivation","text":"<p>In the development of Visual Novel Scripts (VNS), complex storytelling often requires dynamic transitions between dialogues that are not linear. The existing tags support basic flow control but lack the ability to efficiently implement more intricate dialogue pathways that can enhance player engagement and narrative depth. The introduction of the [jump] tag addresses this gap by allowing explicit and clear transitions, improving both the writing experience and gameplay mechanics.</p>"},{"location":"vep/3-Introducing%20%5Bjump%5D%20Tag/#specification","title":"Specification","text":""},{"location":"vep/3-Introducing%20%5Bjump%5D%20Tag/#syntax","title":"Syntax","text":"<p>The [jump] tag will follow a straightforward syntax: <code>[jump]/[jmp] &lt;label&gt;</code> Where  is the identifier of the dialog section to which the flow should be redirected. This label must be predefined in the script."},{"location":"vep/3-Introducing%20%5Bjump%5D%20Tag/#example-usage","title":"Example Usage","text":"<p>Consider the following script snippet:</p> <pre><code>Alex:\n- this is not true\n\n[jump]alice_answer\n\nAlex:\n- or is it?\n\n[end]\n\n[label]alice_answer\nAlice:\n- why not?\n</code></pre> <p>In this scenario, once Alex says, \"this is not For true,\" the dialogue will immediately continue with Alice's response, \"why not?\" The line \"or is it?\" will not be reached unless accessed through a different [jump] command. The dialogue sequence will terminate at Alex's \"or is it?\" if reached without a preceding [jump] due to the [end] tag.</p>"},{"location":"vep/3-Introducing%20%5Bjump%5D%20Tag/#behavior-with-other-tags","title":"Behavior with Other Tags","text":"<ul> <li>[end]: Closes the current dialogue branch. If encountered after a [jump], the sequence does not continue past the [end].</li> <li>[block]: Prevents returning to a previous dialogue point once passed, ensuring linear progression post-block unless redirected by another [jump].</li> </ul>"},{"location":"vep/3-Introducing%20%5Bjump%5D%20Tag/#rejected-ideas","title":"Rejected Idea(s)","text":""},{"location":"vep/3-Introducing%20%5Bjump%5D%20Tag/#reusing-br-tag","title":"Reusing [br] Tag:","text":"<p>Initially considered, the [br] tag was deprecated in VNS 2.0 due to its limited utility and potential confusion with the new [jump] functionality. Its reintroduction could mislead developers about supported features in the current VNS standard.</p>"},{"location":"vep/3-Introducing%20%5Bjump%5D%20Tag/#rationale","title":"Rationale","text":"<p>The [jump] tag offers explicit control over dialogue flow, crucial for developing non-linear narratives and complex interaction patterns in visual novels. By providing a clear, standardized method for script branching, developers can craft more engaging and intricate stories with greater ease.</p>"},{"location":"vep/3-Introducing%20%5Bjump%5D%20Tag/#backwards-compatibility","title":"Backwards Compatibility","text":"<p>The introduction of the [jump] tag will not affect existing scripts as it introduces new functionality without altering the behavior of current tags.</p>"},{"location":"vep/3-Introducing%20%5Bjump%5D%20Tag/#vep-development-process","title":"VEP Development Process","text":"<p>A live draft for this VEP lives on GitHub. There is also an issue tracker, where much of the technical discussion takes place. The draft on GitHub is updated regularly in small increments. The official VEPS repo is (usually) only updated when a new draft is posted to the Linpg Foundation.</p>"},{"location":"vep/3-Introducing%20%5Bjump%5D%20Tag/#copyright","title":"Copyright","text":"<p>This document has been placed in the public domain.</p>"}]}